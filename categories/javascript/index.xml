<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Javascript - Category - 밤에 하는 개발</title>
        <link>http://qweqwe9ab.github.io/categories/javascript/</link>
        <description>Javascript - Category - 밤에 하는 개발</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>qweqwe9ab@gmail.com (밤개발)</managingEditor>
            <webMaster>qweqwe9ab@gmail.com (밤개발)</webMaster><lastBuildDate>Sun, 20 Jan 2019 18:29:32 &#43;0000</lastBuildDate><atom:link href="http://qweqwe9ab.github.io/categories/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>[javascript] 하노이 탑 (Hanoi Tower)</title>
    <link>http://qweqwe9ab.github.io/posts/20190120-hanoi/</link>
    <pubDate>Sun, 20 Jan 2019 18:29:32 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190120-hanoi/</guid>
    <description><![CDATA[하노이 탑 하노이 탑은 다음과 같은 조건을 가지고 있다.
 한번에 하나의 원판만 이동 맨위에 있는 원판만 이동 가능 작은 원판 위에 큰 원판을 올리는 것은 불가능 중간의 막대는 임시적으로 이용 가능  n-1개를 A에서 B로 이동하고, n개를 A에서 C로 이동한다. 그리고 n-1개를 B에서 C로 이동한다.
1 2 3 4 5 6 7 8 9 10  let hanoi = (n, from, temp, to) =&gt; { if(n===1) console.log(`${n}을 ${from}에서 ${to}로 이동`); else { hanoi(n-1, from, to, temp); console.]]></description>
</item><item>
    <title>[javascript] 피보나치 (Fibonacci)</title>
    <link>http://qweqwe9ab.github.io/posts/20190120-fibonacci/</link>
    <pubDate>Sun, 20 Jan 2019 17:53:44 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190120-fibonacci/</guid>
    <description><![CDATA[피보나치 수열 0, 1, 1, 2, 3, 5, 8, 13, 21.... 피보나치는 0번째는 0, 첫 번째는 1 그 이후로는 이전 두개의 수를 더한 값을 갖는 수열이다.
F(0) = 0, F(1) = 1, F(n) = F(n-2) + F(n-1)
1 2 3 4 5 6 7 8 9 10 11  let fib = (num) =&gt; { if(num &lt;= 1) return num; return fib(num-1) + fib(num-2); } console.log(fib(1)) console.log(fib(2)) console.log(fib(3)) console.log(fib(4)) console.log(fib(5)) console.]]></description>
</item><item>
    <title>동기와 비동기</title>
    <link>http://qweqwe9ab.github.io/posts/20190119-sync-vs-async/</link>
    <pubDate>Sat, 19 Jan 2019 17:42:36 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190119-sync-vs-async/</guid>
    <description><![CDATA[설명 동기 여러작업을 진행 할때 하나의 작업이 끝날때 까지 기다렸다가 다음 작업을 진행하는 것.
비동기 여러작업을 진행 할때 하나의 작업을 실행하고 다음 작업으로 넘어간다. 이전에 실행한 작업은 작업이 끝나고 callback을 넘긴다.
비유 간단하게 설명하면 동기는 카페에서 손님에게 주문을 받고 커피를 만들어서 전달하고 다음 손님으로 넘어가는 것 이고 비동기는 카페에서 손님에게 주문을 받고 진동벨을 준 다음 다음 손님의 주문으로 넘어가고, 손님의 커피가 제조가 완료되면 진동벨(callback)을 울려 해당 손님에게 전달한다.
코드 동기 코드]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 스택으로 큐 구현 javascript</title>
    <link>http://qweqwe9ab.github.io/posts/20190118-queue-using-stacks/</link>
    <pubDate>Fri, 18 Jan 2019 15:46:22 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190118-queue-using-stacks/</guid>
    <description><![CDATA[오늘은 스택으로 큐를 구현하는 문제를 살펴보겠습니다. 스택은 LIFO - Last In First Out 방식이다. 간단하게 설명하면 책상 위에 책을 하나씩 쌓아두고 위에서부터 하나씩 집어서 읽는 것이다.
 나중에 쌓은(제일 위에 있는) 책을 먼저 집어서 읽는 방식  큐는 FIFO - First In First Out 방식이다. 간단하게 설명하면 카페에서 한 줄로 서서 주문을 하는 것이다.
 제일 먼저 온 사람이 먼저 계산하는 방식  스택과 큐에 대한 설명과 코드는 이 블로그의 글을 참조하고, 오늘은 스택으로 큐를 구현해 보겠습니다.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 연결리스트(linked list)</title>
    <link>http://qweqwe9ab.github.io/posts/20190117-javascript-linked-list/</link>
    <pubDate>Thu, 17 Jan 2019 17:40:16 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190117-javascript-linked-list/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73  const linkedListNode = class LinkedListNode { constructor(value, next = null) { this.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 큐(Queue)</title>
    <link>http://qweqwe9ab.github.io/posts/20190117-javascript-queue/</link>
    <pubDate>Wed, 16 Jan 2019 17:40:01 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190117-javascript-queue/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  function createQueue() { const queue = []; return { enqueue(item) { queue.unshift(item); }, dequeue() { return queue.pop(); }, peek() { return queue[queue.length -1]; }, get length() { return queue.length; }, isEmpty() { return queue.length === 0; } } } const q = createQueue(); q.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 스택(Stack)</title>
    <link>http://qweqwe9ab.github.io/posts/20190117-javascript-stack/</link>
    <pubDate>Wed, 16 Jan 2019 17:39:50 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190117-javascript-stack/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  function createStack() { const stack = []; return { push(item) { stack.push(item); }, pop() { return stack.pop(); }, peek() { return stack[stack.length - 1]; }, get length() { return stack.length; }, isEmpty() { return stack.length === 0; } } } const s = createStack(); s.]]></description>
</item><item>
    <title>[jstips] 중첩된 조건문 개선 if, switch</title>
    <link>http://qweqwe9ab.github.io/posts/20190114-improve-nested-conditionals/</link>
    <pubDate>Mon, 14 Jan 2019 18:04:48 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190114-improve-nested-conditionals/</guid>
    <description><![CDATA[중첩된 조건문 개선  jstips에서 javascript를 사용할 때 중첩된 if문을 조금 더 깔끔하고 효율적으로 만들 수 있을지에 대해서 읽었습니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  if (color) { if (color === &#39;black&#39;) { printBlackBackground(); } else if (color === &#39;red&#39;) { printRedBackground(); } else if (color === &#39;blue&#39;) { printBlueBackground(); } else if (color === &#39;green&#39;) { printGreenBackground(); } else { printYellowBackground(); } }   우선 중첩된 if문을 개선하는 방법 중에 하나는 switch문을 사용하는 것입니다.]]></description>
</item><item>
    <title>[jstips] 배열에 요소 추가하기 push(),concat(),unshift()</title>
    <link>http://qweqwe9ab.github.io/posts/20190114-insert-item-inside-an-array/</link>
    <pubDate>Mon, 14 Jan 2019 18:01:39 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190114-insert-item-inside-an-array/</guid>
    <description><![CDATA[오늘은 jstips에서 첫 번째 팁인 배열에 요소 추가하는 방법을 공부해보겠습니다.
저도 개발을 하다 보면 배열에 요소를 추가하는 작업을 많이 하게 되는데, push()를 사용해서 배열의 끝에 요소를 넣고, unshift를 사용해서 배열의 시작 부분에 요소를 넣고, splice를 사용해서 배열의 중간에 요소를 넣는 것은 알고 그렇게 작업을 했었습니다. 근데 jstips에서 글을 읽으면서 속도와 성능을 생각하면서 작업을 하는 것도 필요할 것 같다는 생각이 들었습니다.
귀찮은 분들을 위해 맨 아래에 결론을 적어놨습니다!
배열의 끝부분에 추가  배열의 끝에 요소를 추가하는 방법 중 제일 쉬운 방법은 push()를 사용하는 것인데, 다른 방법들도 있다.]]></description>
</item></channel>
</rss>
