<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Javascript - Category - 밤에 하는 개발</title>
        <link>http://qweqwe9ab.github.io/categories/javascript/</link>
        <description>Javascript - Category - 밤에 하는 개발</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>qweqwe9ab@gmail.com (밤개발)</managingEditor>
            <webMaster>qweqwe9ab@gmail.com (밤개발)</webMaster><lastBuildDate>Mon, 05 Jul 2021 17:12:12 &#43;0900</lastBuildDate><atom:link href="http://qweqwe9ab.github.io/categories/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>[LeetCode] 7. Reverse Integer</title>
    <link>http://qweqwe9ab.github.io/posts/20200705-leetcode-7/</link>
    <pubDate>Mon, 05 Jul 2021 17:12:12 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20200705-leetcode-7/</guid>
    <description><![CDATA[#7. Reverse Integer
문제 32비트 숫자를 입력받고 숫자를 뒤집에서 반환한다. 음수이면 -를 붙혀서 반환한다.
설명 우선, 제가 생각한 방법은 입력받은 숫자를 양수/음수 구분없게 절대값으로 만들고, 숫자를 뒤집고, 입력받은 숫자였으면 -를 붙혀서 반환하는 방법을 생각했다. Math.abs 를 이용해서 절대값을 만들고, toString()을 이용해서 숫자를 문자로 바꾼다음,
split() 으로 문자를 쪼개서 배열로 만들고, reverse() 를 이용해서 배열의 순서를 뒤집고, join() 을 이용해서 배열을 문자열로 만들고 Math.sign() 을 이용해서 x의 부호를 가져와 숫자의 부호를 넣어준다.]]></description>
</item><item>
    <title>Test</title>
    <link>http://qweqwe9ab.github.io/leetcode/test/</link>
    <pubDate>Mon, 05 Jul 2021 16:41:56 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/leetcode/test/</guid>
    <description><![CDATA[{{ range first 10 ( where .Site.RegularPages &ldquo;Type&rdquo; &ldquo;cool&rdquo; ) }}
 {{ .Title }} {{ end }}  ]]></description>
</item><item>
    <title>[LeetCode] 1. Two Sum</title>
    <link>http://qweqwe9ab.github.io/posts/20200705-leetcode-1/</link>
    <pubDate>Mon, 05 Jul 2021 15:38:55 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20200705-leetcode-1/</guid>
    <description><![CDATA[1. Two Sum 문제  숫자로 이루어진 배열과, 숫자로된 타겟을 입력받아서 배열에서 타켓을 만들 수 있는 숫자의 인덱스를 반환.
 만약에 배열 [1, 3, 6, 7]과 타겟 8을 입력 받는다면 [0, 3]를 반환한다
 답 1 2 3 4 5 6 7  var twoSum = function(nums, target) { for (let i = 0; i &lt; nums.length; i++) { const test = target - nums[i]; const index = nums.indexOf(test); if (index !]]></description>
</item><item>
    <title>Leetcode 계획</title>
    <link>http://qweqwe9ab.github.io/posts/20200705-leetcode-start/</link>
    <pubDate>Mon, 05 Jul 2021 14:39:17 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20200705-leetcode-start/</guid>
    <description><![CDATA[Leetcode 시작. 언제든지 인터뷰를 볼 수 있도록 계속 코딩테스트를 준비할 예정입니다.
물론 경력직의 이직에서 코딩테스트가 가장 중요한 것은 아니겠지만, 나중에 어떤 기회가 올 수 있을지 모르기 때문에! 열심히 준비해 보도록 하겠습니다.
우선, Leetcode는 Easy 단계를 하나씩 순서대로 풀어보겠습니다.
매일 한 문제씩 푸는 것은 목표로 달려보겠습니다!]]></description>
</item><item>
    <title>[javascript] 하노이 탑 (Hanoi Tower)</title>
    <link>http://qweqwe9ab.github.io/posts/20190120-hanoi/</link>
    <pubDate>Sun, 20 Jan 2019 18:29:32 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190120-hanoi/</guid>
    <description><![CDATA[하노이 탑 하노이 탑은 다음과 같은 조건을 가지고 있다.
 한번에 하나의 원판만 이동 맨위에 있는 원판만 이동 가능 작은 원판 위에 큰 원판을 올리는 것은 불가능 중간의 막대는 임시적으로 이용 가능  n-1개를 A에서 B로 이동하고, n개를 A에서 C로 이동한다. 그리고 n-1개를 B에서 C로 이동한다.
1 2 3 4 5 6 7 8 9 10  let hanoi = (n, from, temp, to) =&gt; { if(n===1) console.log(`${n}을 ${from}에서 ${to}로 이동`); else { hanoi(n-1, from, to, temp); console.]]></description>
</item><item>
    <title>[javascript] 피보나치 (Fibonacci)</title>
    <link>http://qweqwe9ab.github.io/posts/20190120-fibonacci/</link>
    <pubDate>Sun, 20 Jan 2019 17:53:44 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190120-fibonacci/</guid>
    <description><![CDATA[피보나치 수열 0, 1, 1, 2, 3, 5, 8, 13, 21.... 피보나치는 0번째는 0, 첫 번째는 1 그 이후로는 이전 두개의 수를 더한 값을 갖는 수열이다.
F(0) = 0, F(1) = 1, F(n) = F(n-2) + F(n-1)
1 2 3 4 5 6 7 8 9 10 11  let fib = (num) =&gt; { if(num &lt;= 1) return num; return fib(num-1) + fib(num-2); } console.log(fib(1)) console.log(fib(2)) console.log(fib(3)) console.log(fib(4)) console.log(fib(5)) console.]]></description>
</item><item>
    <title>동기와 비동기</title>
    <link>http://qweqwe9ab.github.io/posts/20190119-sync-vs-async/</link>
    <pubDate>Sat, 19 Jan 2019 17:42:36 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190119-sync-vs-async/</guid>
    <description><![CDATA[설명 동기 여러작업을 진행 할때 하나의 작업이 끝날때 까지 기다렸다가 다음 작업을 진행하는 것.
비동기 여러작업을 진행 할때 하나의 작업을 실행하고 다음 작업으로 넘어간다. 이전에 실행한 작업은 작업이 끝나고 callback을 넘긴다.
비유 간단하게 설명하면 동기는 카페에서 손님에게 주문을 받고 커피를 만들어서 전달하고 다음 손님으로 넘어가는 것 이고 비동기는 카페에서 손님에게 주문을 받고 진동벨을 준 다음 다음 손님의 주문으로 넘어가고, 손님의 커피가 제조가 완료되면 진동벨(callback)을 울려 해당 손님에게 전달한다.
코드 동기 코드]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 스택으로 큐 구현 javascript</title>
    <link>http://qweqwe9ab.github.io/posts/20190118-queue-using-stacks/</link>
    <pubDate>Fri, 18 Jan 2019 15:46:22 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190118-queue-using-stacks/</guid>
    <description><![CDATA[오늘은 스택으로 큐를 구현하는 문제를 살펴보겠습니다. 스택은 LIFO - Last In First Out 방식이다. 간단하게 설명하면 책상 위에 책을 하나씩 쌓아두고 위에서부터 하나씩 집어서 읽는 것이다.
 나중에 쌓은(제일 위에 있는) 책을 먼저 집어서 읽는 방식  큐는 FIFO - First In First Out 방식이다. 간단하게 설명하면 카페에서 한 줄로 서서 주문을 하는 것이다.
 제일 먼저 온 사람이 먼저 계산하는 방식  스택과 큐에 대한 설명과 코드는 이 블로그의 글을 참조하고, 오늘은 스택으로 큐를 구현해 보겠습니다.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 연결리스트(linked list)</title>
    <link>http://qweqwe9ab.github.io/posts/20190117-javascript-linked-list/</link>
    <pubDate>Thu, 17 Jan 2019 17:40:16 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190117-javascript-linked-list/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73  const linkedListNode = class LinkedListNode { constructor(value, next = null) { this.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 큐(Queue)</title>
    <link>http://qweqwe9ab.github.io/posts/20190117-javascript-queue/</link>
    <pubDate>Wed, 16 Jan 2019 17:40:01 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/20190117-javascript-queue/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  function createQueue() { const queue = []; return { enqueue(item) { queue.unshift(item); }, dequeue() { return queue.pop(); }, peek() { return queue[queue.length -1]; }, get length() { return queue.length; }, isEmpty() { return queue.length === 0; } } } const q = createQueue(); q.]]></description>
</item></channel>
</rss>
