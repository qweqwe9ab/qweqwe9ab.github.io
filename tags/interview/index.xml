<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interview on Javascript Docs</title>
    <link>http://qweqwe9ab.github.io/tags/interview/</link>
    <description>Recent content in interview on Javascript Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>qweqwe9ab@gmail.com (밤개발)</managingEditor>
    <webMaster>qweqwe9ab@gmail.com (밤개발)</webMaster>
    <lastBuildDate>Sun, 20 Jan 2019 18:29:32 +0000</lastBuildDate><atom:link href="http://qweqwe9ab.github.io/tags/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[javascript] 하노이 탑 (Hanoi Tower)</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190120-Hanoi/</link>
      <pubDate>Sun, 20 Jan 2019 18:29:32 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190120-Hanoi/</guid>
      <description>하노이 탑 하노이 탑은 다음과 같은 조건을 가지고 있다.
한번에 하나의 원판만 이동 맨위에 있는 원판만 이동 가능 작은 원판 위에 큰 원판을 올리는 것은 불가능 중간의 막대는 임시적으로 이용 가능 n-1개를 A에서 B로 이동하고, n개를 A에서 C로 이동한다. 그리고 n-1개를 B에서 C로 이동한다.
1 2 3 4 5 6 7 8 9 10 let hanoi = (n, from, temp, to) =&amp;gt; { if(n===1) console.log(`${n}을 ${from}에서 ${to}로 이동`); else { hanoi(n-1, from, to, temp); console.</description>
    </item>
    
    <item>
      <title>[javascript] 피보나치 (Fibonacci)</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190120-Fibonacci/</link>
      <pubDate>Sun, 20 Jan 2019 17:53:44 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190120-Fibonacci/</guid>
      <description>피보나치 수열 0, 1, 1, 2, 3, 5, 8, 13, 21.... 피보나치는 0번째는 0, 첫 번째는 1 그 이후로는 이전 두개의 수를 더한 값을 갖는 수열이다.
F(0) = 0, F(1) = 1, F(n) = F(n-2) + F(n-1)
1 2 3 4 5 6 7 8 9 10 11 let fib = (num) =&amp;gt; { if(num &amp;lt;= 1) return num; return fib(num-1) + fib(num-2); } console.log(fib(1)) console.log(fib(2)) console.log(fib(3)) console.log(fib(4)) console.log(fib(5)) console.</description>
    </item>
    
    <item>
      <title>동기와 비동기</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190119-Sync-VS-Async/</link>
      <pubDate>Sat, 19 Jan 2019 17:42:36 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190119-Sync-VS-Async/</guid>
      <description>설명 동기 여러작업을 진행 할때 하나의 작업이 끝날때 까지 기다렸다가 다음 작업을 진행하는 것.
비동기 여러작업을 진행 할때 하나의 작업을 실행하고 다음 작업으로 넘어간다. 이전에 실행한 작업은 작업이 끝나고 callback을 넘긴다.
비유 간단하게 설명하면 동기는 카페에서 손님에게 주문을 받고 커피를 만들어서 전달하고 다음 손님으로 넘어가는 것 이고 비동기는 카페에서 손님에게 주문을 받고 진동벨을 준 다음 다음 손님의 주문으로 넘어가고, 손님의 커피가 제조가 완료되면 진동벨(callback)을 울려 해당 손님에게 전달한다.
코드 동기 코드</description>
    </item>
    
    <item>
      <title>프로세스(Process) vs 쓰레드(Thread)</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190119-Process-VS-Thread/</link>
      <pubDate>Sat, 19 Jan 2019 17:09:10 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190119-Process-VS-Thread/</guid>
      <description>프로세스 프로세스는 실행중인 프로그램이다. 디스크로에서 메모리로 적재되어 CPU의 할당을 받을 수 있다. 쓰레드 프로세스의 실행단위 한 프로세스 내에서 동작되는 여러 실행으로 프로세스내의 주소공간이나 자원을 공유한다. 멀티 쓰레드 메모리 공간과 시스템 자원 소모가 줄어들게 된다. 쓰레드 간의 공유된 자원을 사용해 쓰레드간의 통신이 간단하고 빠르다 멀티 쓰레드 문제점 자원을 공유하기 때문에 신경을 써야한다. 동기화 작업으로 인해 성능이 저하될 수 있다. 요약 프로세스는 운영체제로 부터 자원을 할당받는 자원단위(실행중인 프로그램) 쓰레드는 프로세스가 할당 받은 자원을 이용하는 실행 단위()</description>
    </item>
    
    <item>
      <title>[자료구조][자바스크립트] 스택으로 큐 구현 javascript</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190118-Queue-Using-Stacks/</link>
      <pubDate>Fri, 18 Jan 2019 15:46:22 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190118-Queue-Using-Stacks/</guid>
      <description>오늘은 스택으로 큐를 구현하는 문제를 살펴보겠습니다. 스택은 LIFO - Last In First Out 방식이다. 간단하게 설명하면 책상 위에 책을 하나씩 쌓아두고 위에서부터 하나씩 집어서 읽는 것이다.
나중에 쌓은(제일 위에 있는) 책을 먼저 집어서 읽는 방식 큐는 FIFO - First In First Out 방식이다. 간단하게 설명하면 카페에서 한 줄로 서서 주문을 하는 것이다.
제일 먼저 온 사람이 먼저 계산하는 방식 스택과 큐에 대한 설명과 코드는 이 블로그의 글을 참조하고, 오늘은 스택으로 큐를 구현해 보겠습니다.</description>
    </item>
    
    <item>
      <title>[자료구조][자바스크립트] 연결리스트(linked list)</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190117-Javascript-Linked-List/</link>
      <pubDate>Thu, 17 Jan 2019 17:40:16 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190117-Javascript-Linked-List/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 const linkedListNode = class LinkedListNode { constructor(value, next = null) { this.</description>
    </item>
    
    <item>
      <title>REST API</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190117-Rest-API/</link>
      <pubDate>Thu, 17 Jan 2019 17:12:02 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190117-Rest-API/</guid>
      <description>REST API REST (Representational State Transfer) web의 장점을 최대한 활용할 수 있는 아키텍쳐 HTTP 메서드 메서드 의미 멱등성 POST Create x GET Select O PUT Update O DELETE Delete O 멱등성 : 연산을 여러번해도 달라지지 않는것. REST는 상태 없이 API를 수행한다 그래서 여러 API를 호출하다 실패시 복구해야 하는데 멱등성 메서드는 복구가 필요없다. REST는 리소스 지향으로 모든 것은 명사로 표현한다. 각 세부 리소스에는 ID를 추가한다. REST API의 특성 유니폼 인터페이스 : 표준만 따르면 어떤 기술이라도 사용가능 무상태성 / 스테이트리스 : 서버는 상태를 저장하지 않으므로 각 API 서버는 들어오는 요청만 수행, 구현이 단순 캐슁가능 : HTTP에서 제공하는 캐슁 가능 자체 표현구조 : REST API만 보고 쉽게 이해할 수 있다.</description>
    </item>
    
    <item>
      <title>http와 https</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190117-http-vs-https/</link>
      <pubDate>Thu, 17 Jan 2019 16:15:54 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190117-http-vs-https/</guid>
      <description> Related Posts http (Hyper Text Transfer Protocol) Client와 Server가 메세지를 주고 받는 통신 규약 http://로 시작 메세지를 암호화 하지 않음 https (Hyper Text Transfer Protocol Secure Socket Layer) Client와 Server가 메세지를 주고 받는 통신 규약 https://로 시작 메세지를 암호화함 공개키, 개인키 암호화 SSL 인증서 구입 비용과 갱신 비용이 비싸다 암호화로 속도가 느리다 Related Posts </description>
    </item>
    
    <item>
      <title>[자료구조][자바스크립트] 큐(Queue)</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190117-Javascript-Queue/</link>
      <pubDate>Wed, 16 Jan 2019 17:40:01 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190117-Javascript-Queue/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 function createQueue() { const queue = []; return { enqueue(item) { queue.unshift(item); }, dequeue() { return queue.pop(); }, peek() { return queue[queue.length -1]; }, get length() { return queue.length; }, isEmpty() { return queue.length === 0; } } } const q = createQueue(); q.</description>
    </item>
    
    <item>
      <title>[자료구조][자바스크립트] 스택(Stack)</title>
      <link>http://qweqwe9ab.github.io/posts/old/20190117-Javascript-Stack/</link>
      <pubDate>Wed, 16 Jan 2019 17:39:50 +0000</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/old/20190117-Javascript-Stack/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 function createStack() { const stack = []; return { push(item) { stack.push(item); }, pop() { return stack.pop(); }, peek() { return stack[stack.length - 1]; }, get length() { return stack.length; }, isEmpty() { return stack.length === 0; } } } const s = createStack(); s.</description>
    </item>
    
  </channel>
</rss>
