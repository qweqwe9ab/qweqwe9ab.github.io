<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on Javascript Docs</title>
    <link>http://qweqwe9ab.github.io/tags/LeetCode/</link>
    <description>Recent content in LeetCode on Javascript Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>qweqwe9ab@gmail.com (밤개발)</managingEditor>
    <webMaster>qweqwe9ab@gmail.com (밤개발)</webMaster>
    <lastBuildDate>Thu, 08 Jul 2021 16:55:10 +0900</lastBuildDate><atom:link href="http://qweqwe9ab.github.io/tags/LeetCode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[LeetCode] 121. Best Time to Buy and Sell Stock [Easy]</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-121/</link>
      <pubDate>Thu, 08 Jul 2021 16:55:10 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-121/</guid>
      <description>#121. Best Time to Buy and Sell Stock
문제 주어진 배열은 일별 주식의 가격입니다. 배열의 인덱스는 날, 값은 가격입니다.
이 배열을 가지고 매매를 해서 최대의 수익을 반환하는 문제입니다. 설명 최대 수익을 저장하는 maxProfit와 최소 금액을 저장하는 min변수를 사용해서 최대 수익을 구하고, 그 값을 반환한다.
답 1 2 3 4 5 6 7 8 9 10 var maxProfit = function(prices) { let min = Number.MAX_SAFE_INTEGER; let maxProfit = 0; for (let i = 0; i &amp;lt; prices.</description>
    </item>
    
    <item>
      <title>[LeetCode] 238. Product of Array Except Self</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-238/</link>
      <pubDate>Thu, 08 Jul 2021 16:55:04 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-238/</guid>
      <description>#238. Product of Array Except Self
문제 숫자 배열 nums를 받아서 각 요소가 본인을 제외한 다른 요소 들의 곱으로 배열을 만들어 반환하는 문제이다.
EX) A,B,C,D를 숫자라고 생각하면 [A, B, C, D]의 결과는 [BCD, ACD, ABD, ABC]이다.
제약조건: O(n)
설명 우선 for문을 중복으로 돌면 해결될 것 같지만, O(n)으로 만들어야 되기 때문에 다른 방법을 생각해보자.
위에 문제에 설명 한 것 처럼 [A, B, C, D]가 주어지면 본인의 요소를 제외한 [BCD, ACD, ABD, ABC]를 반환해야 되는데.</description>
    </item>
    
    <item>
      <title>[LeetCode] 561. Array Partition I</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-561/</link>
      <pubDate>Thu, 08 Jul 2021 16:54:57 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-561/</guid>
      <description>#561. Array Partition I
문제 짝수개의 정수를 갖는 정수의 배열 nums가 주어진다. 요소들을 두개씩 짝을 지어서 그 짝들의 최솟값의 합이 최대인 값을 반환한다. 설명 우선, 2개씩 짝지어진 요소의 최솟값들의 합이 최대가 되기 위해서는 배열을 정렬을 해야됩니다.
배열을 sort() 를 사용해서 정렬하고, 작은수부터 2개씩 짝을지어 2개 중에 작은 값들을 더해서 총 합을 반환합니다.
그냥 sort() 를 사용하면 문자순으로 정렬되기 때문에 값을 비교해서 정렬하기 위해 nums.sort((a,b) =&amp;gt; a - b); 이렇게 작업합니다. 답 1 2 3 4 5 6 7 8 var arrayPairSum = function(nums) { nums.</description>
    </item>
    
    <item>
      <title>[LeetCode] 15. 3Sum [Medium]</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-15_/</link>
      <pubDate>Thu, 08 Jul 2021 16:54:51 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-15_/</guid>
      <description>#15. 3Sum
문제 설명 답 LeetCode Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
Example 1:
1 2 Input: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Example 2:
1 2 Input: nums = [] Output: [] Example 3:</description>
    </item>
    
    <item>
      <title>[LeetCode]20200708 Leetcode 42</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-42_/</link>
      <pubDate>Thu, 08 Jul 2021 16:54:45 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200708-leetcode-42_/</guid>
      <description>#
문제 설명 답 LeetCode </description>
    </item>
    
    <item>
      <title>[LeetCode] 5. Longest Palindromic Substring (Medium)</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-5_/</link>
      <pubDate>Thu, 08 Jul 2021 02:55:11 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-5_/</guid>
      <description>#5. Longest Palindromic Substring Medium
문제 주어진 문자열 s에서 가장 긴 회문을 반환하는 문제입니다.
답 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var longestPalindrome = function(s) { let longest = &amp;#39;&amp;#39;; const findLongestPalindrome = (str, i, j) =&amp;gt; { while(i &amp;gt;= 0 &amp;amp;&amp;amp; j &amp;lt; str.length &amp;amp;&amp;amp; str[i] === str[j]) { i -= 1; j += 1; } // slice the qualified substring from the second last iteration return str.</description>
    </item>
    
    <item>
      <title>[LeetCode] 49. Group Anagrams</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-49/</link>
      <pubDate>Thu, 08 Jul 2021 00:55:05 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-49/</guid>
      <description>#49. Group Anagrams
문제 단어의 배열을 받아서, 단어를 구성하는 알파벳의 순서가 다르더라고 같은 알파벳 들로 구성된 단어들을 묶어서 배열로 반환하는 문제입니다.
EX) &amp;rsquo;eat&amp;rsquo;, &amp;lsquo;ate&amp;rsquo;, &amp;rsquo;tea&amp;rsquo;는 같이 묶여서 반환 됩니다.
설명 우선, 단어에 문자 순서가 다른 모든 단어를 찾고 저장하기 위해서 기준으로 알파벳 순으로 정렬된 단어를 만든다. 예를 들어 eat, ate, tae에서는 알파벳 순서로 aet가 키가 되는 것이다. 이 키를 만들기 위해서 split()으로 단어를 쪼개고, sort() 를 사용해서 알파벳의 순서를 정렬하고, join() 을 이용해서 배열을 다시 단어로 만듭니다.</description>
    </item>
    
    <item>
      <title>[LeetCode] 819. Most Common Word</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-819/</link>
      <pubDate>Wed, 07 Jul 2021 15:54:59 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-819/</guid>
      <description>#819. Most Common Word
문제 주어진 문자열 paragraph에서 가장 많이 나온 단어를 반환하는 문제입니다. 단어는 대소문자를 구분하지 않으며 소문자로 리턴합니다.
설명 우선 paragraph는 대소문자를 구분하지 않지 때문에 str.toLowerCase() 를 이용해서 전부 소문자로 변경해줍니다.
그리고 str.replace() 를 통해 문자를 제외한 것들을 제거합니다. 문자만 남은 문자열에서 빈칸 &amp;rsquo; &amp;lsquo;을 기준으로 split()을 사용해서 자르고 단어의 배열로 만들어 줍니다. 이 단어의 배열을 돌면서 includes() 를 이용해서 banned에 포함되는 단어는 제외하하고, 단어를 키로, 나온 횟수를 값으로 가지는 data에 저장을하고, 이 data를 반복문으로 돌려 가장 많은 횟수를 가진 단어를 반환합니다.</description>
    </item>
    
    <item>
      <title>[LeetCode] 937. Reorder Data in Log Files</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-937/</link>
      <pubDate>Wed, 07 Jul 2021 15:54:52 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-937/</guid>
      <description>#937. Reorder Data in Log Files
문제 입력 받은 로그들을 문자로 이루어진 로그는 문자 알파벳순으로, 숫자 로그는 입력 순서로 정렬한다. 같은 문자의 문자로그는 식별자에 따라 정렬한다.
반환 순서는 정렬된 문자로그 + 입력 순서대로의 숫자로그 이다.
설명 우선 제가 생각한 방법은 입력받은로그를 문자로그, 숫자로그로 분류하고, 숫자로그는 입력순으로 저장한다.
문자로그는 앞에 식별자를 제외하고, 정렬작업을 진행한다.
그 후 정렬된 문자로그 + 숫자로그의 배열을 반환한다.
사용된 메소드 설명 split() join() shift() push() sort()
답 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 var reorderLogFiles = function(logs) { const digit = []; // 숫자로그를 저장할 배열 const letter = []; // 문자로그를 저장할 배열 const result = []; // 최종으로 반환할 배열 for (let log of logs) { const arr = log.</description>
    </item>
    
    <item>
      <title>[LeetCode] 344. Reverse String</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-344/</link>
      <pubDate>Wed, 07 Jul 2021 15:54:45 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-344/</guid>
      <description>#344. Reverse String
문제 입력받은 문자 배열을 뒤집어라.
설명 배열의 순서를 뒤집어 주는 reverse() 메소드를 사용해서 배열의 순서를 뒤집습니다.
답 1 2 3 var reverseString = function(s) { return s.reverse(); }; LeetCode Write a function that reverses a string. The input string is given as an array of characters s.
Example 1:
1 2 Input: s = [&amp;#34;h&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;o&amp;#34;] Output: [&amp;#34;o&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;h&amp;#34;] Example 2:
1 2 Input: s = [&amp;#34;H&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;h&amp;#34;] Output: [&amp;#34;h&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;H&amp;#34;] Constraints:</description>
    </item>
    
    <item>
      <title>[LeetCode] 125. Valid Palindrome</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-125/</link>
      <pubDate>Wed, 07 Jul 2021 15:53:57 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200707-leetcode-125/</guid>
      <description>#125. Valid Palindrome
str.toLowerCase()
문제 입력받은 문자열에서 영문자와 숫자만 고려해서(대소문자 무시) 회문인지 확인해서 true/ false 반환.
설명 우선 회문은 뒤집어도 똑같은 문자열을 말합니다. 예를들어 기러기, 탄도유도탄, 다들 잠들다 같은 말입니다.
소문자로 만들기 제가 생각한 방법은 주어진 문자열 s를 str.toLowerCase() 를 이용해서 소문자로 만들어 줍니다.
숫자와 문자를 제외한 모든것 제거 그 후에 숫자와 문자를 제외한 모든것을 str.replace()를 이용해서 제거하고,
문자열 뒤집기 문자열을 뒤집어 주기 위해서 split() 으로 문자열을 쪼개서 배열로 만들고, reverse() 를 이용해서 배열의 순서를 뒤집고, join() 을 이용해서 배열을 문자열로 만들고 나면 뒤집어진 문자열이 생성됩니다.</description>
    </item>
    
    <item>
      <title>[LeetCode] 14. Longest Common Prefix</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200706-leetcode-14/</link>
      <pubDate>Wed, 07 Jul 2021 13:27:57 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200706-leetcode-14/</guid>
      <description>#14. Longest Common Prefix
문제 주어진 문자열의 배열에서 가장 긴 접두사를 찾는 문제.
설명 처음에는 접두사라는게 뭔지몰라서 가장긴 공통된 문자열을 찾는 줄 알고, 열심히 코드를 만들었습니다. 근데 Submit을 눌러보니 계속 틀렸다고 나와서 접두사를 검색해보고 다시 코드를 만들었습니다. 제가 실수로 만든 가장 긴 공통된 문자열을 찾는 코드는 아래 따로 설명하겠습니다.
자세한 설명은 코드에 주석으로 적겠지만, 간단하게 말하면 입력받은 모든 문자열을 돌면서 가장긴 접두사를 찾습니다. indexOf() 를 사용해서 indexOf() 가 0 을 반환하는지 확인해서 접두사인지 확인할 수 있습니다.</description>
    </item>
    
    <item>
      <title>[LeetCode] 13. Roman to Integer</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200706-leetcode-13/</link>
      <pubDate>Wed, 07 Jul 2021 02:26:12 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200706-leetcode-13/</guid>
      <description>#13. Roman to Integer
문제 로마 숫자는 일곱 가지 기호로 표시됩니다 : I, V, X, L, C, D와 M. 입력받은 로마 숫자를 정수로 변환해서 리턴하는 문제입니다.
답 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var romanToInt = function(s) { const romanNumerals = { &amp;#39;I&amp;#39;: 1, &amp;#39;V&amp;#39;: 5, &amp;#39;X&amp;#39;: 10, &amp;#39;L&amp;#39;: 50, &amp;#39;C&amp;#39;: 100, &amp;#39;D&amp;#39;: 500, &amp;#39;M&amp;#39;: 1000, }; let prev = 0; let result = 0; for(let i = 0; i&amp;lt;s.</description>
    </item>
    
    <item>
      <title>[LeetCode] 20. Valid Parentheses</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200706-leetcode-20_/</link>
      <pubDate>Tue, 06 Jul 2021 13:28:00 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200706-leetcode-20_/</guid>
      <description>#20. Valid Parentheses
문제 답 설명 LeetCode </description>
    </item>
    
    <item>
      <title>[LeetCode] 9. Palindrome Number</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200705-LeetCode-9/</link>
      <pubDate>Mon, 05 Jul 2021 17:35:35 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200705-LeetCode-9/</guid>
      <description>9. Palindrome Number 문제 우선 Palindrome이 뭔지 몰라서 사전에 검색을 해보니
회문(回文: madam이나 nurses run처럼 앞에서부터 읽으나 뒤에서부터 읽으나 동일한 단어나 구)
이라고 나옵니다. 단어를 그대로 읽나 거꾸로 뒤집어 읽나 똑같은 단어를 말한다고 합니다. 예를들어 기러기는 그대로 읽어도 기러기, 거꾸로 읽어도 기러기가되니까 회문이 맞습니다!
하지만 여기서는 문자 회문? 이니까 숫자로 값을 입력할 것 입니다. 예를들어 123이 들어오면 false를 반환하고 232가 들어오면 true를 반환합니다.
답 1 2 3 4 5 var isPalindrome = function(x) { if (x &amp;lt; 0) return false; const palindrome = parseInt(x.</description>
    </item>
    
    <item>
      <title>[LeetCode] 7. Reverse Integer</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200705-leetcode-7/</link>
      <pubDate>Mon, 05 Jul 2021 17:12:12 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200705-leetcode-7/</guid>
      <description>#7. Reverse Integer
문제 32비트 숫자를 입력받고 숫자를 뒤집에서 반환한다. 음수이면 -를 붙혀서 반환한다.
설명 우선, 제가 생각한 방법은 입력받은 숫자를 양수/음수 구분없게 절대값으로 만들고, 숫자를 뒤집고, 입력받은 숫자였으면 -를 붙혀서 반환하는 방법을 생각했다. Math.abs() 를 이용해서 절대값을 만들고, toString() 을 이용해서 숫자를 문자로 바꾼다음,
split() 으로 문자를 쪼개서 배열로 만들고, reverse() 를 이용해서 배열의 순서를 뒤집고, join() 을 이용해서 배열을 문자열로 만들고 Math.sign() 을 이용해서 x의 부호를 가져와 숫자의 부호를 넣어준다.</description>
    </item>
    
    <item>
      <title>[LeetCode] 1. Two Sum</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200705-leetcode-1/</link>
      <pubDate>Mon, 05 Jul 2021 15:38:55 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200705-leetcode-1/</guid>
      <description>1. Two Sum 문제 숫자로 이루어진 배열과, 숫자로된 타겟을 입력받아서 배열에서 타켓을 만들 수 있는 숫자의 인덱스를 반환.
만약에 배열 [1, 3, 6, 7]과 타겟 8을 입력 받는다면 [0, 3]를 반환한다
답 1 2 3 4 5 6 7 var twoSum = function(nums, target) { for (let i = 0; i &amp;lt; nums.length; i++) { const test = target - nums[i]; const index = nums.indexOf(test); if (index != -1 &amp;amp;&amp;amp; index !</description>
    </item>
    
    <item>
      <title>Leetcode 계획</title>
      <link>http://qweqwe9ab.github.io/posts/leetcode/20200705-leetcode-start/</link>
      <pubDate>Mon, 05 Jul 2021 14:39:17 +0900</pubDate>
      <author>qweqwe9ab@gmail.com (밤개발)</author>
      <guid>http://qweqwe9ab.github.io/posts/leetcode/20200705-leetcode-start/</guid>
      <description>Leetcode 시작. 언제든지 인터뷰를 볼 수 있도록 계속 코딩테스트를 준비할 예정입니다.
물론 경력직의 이직에서 코딩테스트가 가장 중요한 것은 아니겠지만, 나중에 어떤 기회가 올 수 있을지 모르기 때문에! 열심히 준비해 보도록 하겠습니다.
우선, Leetcode는 Easy 단계를 하나씩 순서대로 풀어보겠습니다.
매일 한 문제씩 푸는 것은 목표로 달려보겠습니다!</description>
    </item>
    
  </channel>
</rss>
