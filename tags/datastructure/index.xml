<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>datastructure - Tag - 밤에 하는 개발</title>
        <link>http://qweqwe9ab.github.io/tags/datastructure/</link>
        <description>datastructure - Tag - 밤에 하는 개발</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>qweqwe9ab@gmail.com (밤개발)</managingEditor>
            <webMaster>qweqwe9ab@gmail.com (밤개발)</webMaster><lastBuildDate>Fri, 18 Jan 2019 15:46:22 &#43;0000</lastBuildDate><atom:link href="http://qweqwe9ab.github.io/tags/datastructure/" rel="self" type="application/rss+xml" /><item>
    <title>[자료구조][자바스크립트] 스택으로 큐 구현 javascript</title>
    <link>http://qweqwe9ab.github.io/posts/old/20190118-queue-using-stacks/</link>
    <pubDate>Fri, 18 Jan 2019 15:46:22 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/old/20190118-queue-using-stacks/</guid>
    <description><![CDATA[오늘은 스택으로 큐를 구현하는 문제를 살펴보겠습니다. 스택은 LIFO - Last In First Out 방식이다. 간단하게 설명하면 책상 위에 책을 하나씩 쌓아두고 위에서부터 하나씩 집어서 읽는 것이다.
 나중에 쌓은(제일 위에 있는) 책을 먼저 집어서 읽는 방식  큐는 FIFO - First In First Out 방식이다. 간단하게 설명하면 카페에서 한 줄로 서서 주문을 하는 것이다.
 제일 먼저 온 사람이 먼저 계산하는 방식  스택과 큐에 대한 설명과 코드는 이 블로그의 글을 참조하고, 오늘은 스택으로 큐를 구현해 보겠습니다.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 연결리스트(linked list)</title>
    <link>http://qweqwe9ab.github.io/posts/old/20190117-javascript-linked-list/</link>
    <pubDate>Thu, 17 Jan 2019 17:40:16 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/old/20190117-javascript-linked-list/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73  const linkedListNode = class LinkedListNode { constructor(value, next = null) { this.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 큐(Queue)</title>
    <link>http://qweqwe9ab.github.io/posts/old/20190117-javascript-queue/</link>
    <pubDate>Wed, 16 Jan 2019 17:40:01 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/old/20190117-javascript-queue/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  function createQueue() { const queue = []; return { enqueue(item) { queue.unshift(item); }, dequeue() { return queue.pop(); }, peek() { return queue[queue.length -1]; }, get length() { return queue.length; }, isEmpty() { return queue.length === 0; } } } const q = createQueue(); q.]]></description>
</item><item>
    <title>[자료구조][자바스크립트] 스택(Stack)</title>
    <link>http://qweqwe9ab.github.io/posts/old/20190117-javascript-stack/</link>
    <pubDate>Wed, 16 Jan 2019 17:39:50 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://qweqwe9ab.github.io/posts/old/20190117-javascript-stack/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  function createStack() { const stack = []; return { push(item) { stack.push(item); }, pop() { return stack.pop(); }, peek() { return stack[stack.length - 1]; }, get length() { return stack.length; }, isEmpty() { return stack.length === 0; } } } const s = createStack(); s.]]></description>
</item></channel>
</rss>
